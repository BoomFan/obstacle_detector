<!-- Demonstation of obstacle detector -->
<launch>

  <param name="use_sim_time" value="true"/>  

  <!--node name="map_to_scanner_base" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map robot"/>
  <node name="scanner_base_to_front_scanner" pkg="tf2_ros" type="static_transform_publisher" args="0.23565 -0.0005 0.06795 0 0 0 robot front_scanner"/>
  <node name="scanner_base_to_rear_scanner" pkg="tf2_ros" type="static_transform_publisher" args="-0.23832 0.00542 0.09888 3.141592 0 0 robot rear_scanner"/-->

  <node name="nodelet_manager" pkg="nodelet" type="nodelet" args="manager" output="screen">
    <param name="num_worker_threads" value="20"/>
  </node>

  <node name="scans_merger" pkg="nodelet" type="nodelet" args="load obstacle_detector/ScansMerger nodelet_manager">
    <param name="use_sim_time" value="true"/> 
    <param name="active"            value="true"/>
    <param name="publish_scan"      value="true"/>
    <param name="publish_pcl"       value="false"/>

    <param name="ranges_num"        value="5000"/>

    <param name="min_scanner_range" value="0.01"/>
    <param name="max_scanner_range" value="20.0"/>

    <param name="min_x_range"       value="-20.0"/>
    <param name="max_x_range"       value="20.0"/>
    <param name="min_y_range"       value="-20.0"/>
    <param name="max_y_range"       value="20.0"/>

    <param name="fixed_frame_id"    value="map"/>
    <param name="target_frame_id"   value="segway/base_link"/>
    <!--The fused scanning signal will be in "target_frame_id"-->
    <remap from="/front_scan" to="/first"/>
    <!--The fused scanning signal will be published in to topic "/scan"-->
  </node>




  <node name="obstacle_extractor" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleExtractor nodelet_manager">
    <param name="use_sim_time" value="true"/> 
    <param name="active"               value="true"/>
    <param name="use_scan"             value="true"/>
    <!--If "use_scan" is true, the extractor will subscribe from topic "/scan"-->
    <param name="use_pcl"              value="false"/>
    <!--If "use_pcl" is true, the extractor will subscribe from topic "/pcl"-->

    <param name="use_split_and_merge"    value="true"/>
    <param name="circles_from_visibles"  value="true"/>
    <param name="discard_converted_segments" value="true"/>
    <param name="transform_coordinates"  value="true"/>
    <!--If "transform_coordinates" is true, the "obstacle" frame would be the "frame_id", otherwise it would just be the "target_frame_id" defined in "scans_merger" package-->

    <param name="min_x_limit"       value="-20.0"/>
    <param name="max_x_limit"       value="20.0"/>
    <param name="min_y_limit"       value="-20.0"/>
    <param name="max_y_limit"       value="20.0"/>

    <param name="min_group_points"     value="3"/>

    <param name="max_group_distance"   value="0.1"/>
    <param name="distance_proportion"  value="0.00628"/>
    <param name="max_split_distance"   value="0.2"/>
    <param name="max_merge_separation" value="0.2"/>
    <param name="max_merge_spread"     value="0.2"/>
    <param name="max_circle_radius"    value="0.6"/><!--1.8 / 0.6-->
    <param name="radius_enlargement"   value="0.3"/><!--0.6 / 0.3-->

    <param name="frame_id"             value="map"/>
  </node>




  <node name="obstacle_tracker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleTracker nodelet_manager">
    <param name="use_sim_time" value="true"/> 
    <param name="active"                  value="true"/>

    <param name="loop_rate"               value="2.0"/>
    <!--In "obstacle_tracker" cpp file, it assumes that the hokuyo sensor rate is 10Hz.-->
    <param name="tracking_duration"       value="1.0"/>
    <param name="min_correspondence_cost" value="1.6"/>
    <param name="std_correspondence_dev"  value="0.35"/>
    <param name="process_variance"        value="0.1"/>  
    <param name="process_rate_variance"   value="0.1"/>  
    <param name="measurement_variance"    value="1.0"/>  
    
    <param name="speed_threshold"    value="0.08"/>
    <param name="min_radius"    value="0.4"/>
    <param name="max_radius"    value="0.6"/>
    <param name="x_step"    value="0.05"/>
    <param name="y_step"    value="0.05"/>
    <param name="cone"    value="0.92"/>
    <param name="predict_time"    value="0.5"/>

    <param name="frame_id"                value="map"/>

    <remap from="tracked_obstacles" to="obstacles"/>
  </node>




  <node name="obstacle_publisher" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstaclePublisher nodelet_manager" output="screen">
  <!--This package is only used for publishing example obstacles, we don't quite need it.-->
    <param name="active"           value="false"/>
    <param name="reset"            value="false"/>

    <param name="fusion_example"   value="false"/>
    <param name="fission_example"  value="false"/>

    <param name="loop_rate"        value="10.0"/>
    <param name="radius_margin"    value="0.25"/>

    <rosparam param="x_vector">[-3.0, -2.5, -2.5, -1.0, -1.0, -0.5, 2.5, 0.2, 2.0, 4.5, 4.0, 1.5]</rosparam>
    <rosparam param="y_vector">[1.5, 0.0, -2.5, 3.0, 1.0, -4.0, -3.0, -0.9, 0.0, 0.0, 2.0, 2.0]</rosparam>
    <rosparam param="r_vector">[0.5, 0.5, 1.5, 0.5, 0.7, 0.5, 1.5, 0.7, 0.7, 1.0, 0.5, 1.0]</rosparam>
    <rosparam param="vx_vector">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</rosparam>
    <rosparam param="vy_vector">[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</rosparam>

    <param name="frame_id"         value="map"/>
  </node>

  <!--node name="obstacle_projector" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleProjector nodelet_manager" output="screen">
    <param name="active"                  value="true"/>

    <param name="loop_rate"               value="20.0"/>

    <param name="frame_id"                value="camera_link"/>
  </node-->



  <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find obstacle_detector)/resources/roahm_obstacle_detector.rviz"/>

</launch>
